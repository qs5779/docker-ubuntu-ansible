---
name: Publish Releases to Github Repository

# from https://github.com/metcalfc/docker-action-examples/blob/main/app/Dockerfile
# When its time to do a release do a full cross platform build for all supported
# architectures and push all of them to Docker Hub.
on:
  push:
    tags:
      - "[0-9]{1,2}.[0-9]{1,2}"

jobs:
  docker:
    runs-on: ubuntu-latest
    steps:
      # GitHub Actions do not automatically checkout your projects. If you need the code
      # you need to check it out.
      - name: Checkout
        uses: actions/checkout@v2

      - name: Prepare
        id: prep
        run: |
          DOCKER_IMAGE=qs5779/python-multi
          VERSION=edge
          if [[ $GITHUB_REF == refs/tags/* ]]; then
            VERSION=${GITHUB_REF#refs/tags/}
          fi
          if [ "${{ github.event_name }}" = "schedule" ]; then
            VERSION=nightly
          fi
          echo ::set-output name=suffix::${VERSION}
          TAGS="${DOCKER_IMAGE}:${VERSION}"
          if [[ $VERSION =~ ^22.04$ ]]; then
            TAGS="$TAGS,${DOCKER_IMAGE}:latest"
          fi
          echo ::set-output name=tags::${TAGS}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
        with:
          platforms: all

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to ghcr
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push
        id: docker_build
        uses: docker/build-push-action@v3
        with:
          builder: ${{ steps.buildx.outputs.name }}
          context: .
          file: ./Dockerfile.${{ steps.prep.outputs.suffix }}
          # platforms: linux/386,linux/amd64,linux/arm32v7,linux/arm64,linux/ppc64le,linux/s390x,linux/riscv64
          platforms: linux/amd64,linux/arm64
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.prep.outputs.tags }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Image digest
        run: echo ${{ steps.docker_build.outputs.digest }}
...
